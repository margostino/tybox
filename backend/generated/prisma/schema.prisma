// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../backend/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Example models for your application

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String   @map("password_hash")
  email        String?
  name         String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  posts        Post[]
  profile      Profile?
  Feed         Feed[]

  @@index([username])
  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  avatarUrl String?  @map("avatar_url")
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profile")
}

model Post {
  id         String     @id @default(uuid())
  title      String
  content    String
  published  Boolean    @default(false)
  authorId   String     @map("author_id")
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[]
  tags       Tag[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@index([authorId])
  @@index([published])
  @@map("post")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tag")
}

model Quote {
  id        String   @id @default(uuid())
  text      String
  author    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("quote")
}

model Feed {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  type      String   @map("feed_type")
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id])

  @@map("feed")
}
